{"version":3,"sources":["components/IncrementButton.js","components/ValueInput.js","App.js","serviceWorker.js","index.js"],"names":["IncrementButton","props","useState","isClicked","setIsClicked","className","onClick","incrementNumber","step","ValueInput","title","type","name","value","onChange","ev","placeholder","App","number","setNumber","values","setValue","errorState","errorText","error","setErrorState","handleValueChange","isNaN","alert","n","useEffect","fromValue","toValue","target","_","range","map","el","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+PAqBeA,MAlBf,SAAyBC,GAAQ,IAAD,EAEMC,oBAAS,GAFf,mBAErBC,EAFqB,KAEVC,EAFU,KAS5B,OACI,yBAAKC,UAAU,mBACX,6BACI,4BAAQC,QARE,WAClBF,GAAcD,GACdF,EAAMM,oBAMmCN,EAAMO,SCAxCC,MAZf,SAAoBR,GAIhB,OACI,yBAAKI,UAAWJ,EAAMI,WAClB,yBAAKA,UAAU,oBAAoBJ,EAAMS,OACzC,2BAAOC,KAAK,OAAOC,KAAMX,EAAMW,KAAMC,MAAOZ,EAAMY,MAAOC,SANjE,SAAsBC,GAClBd,EAAMa,SAASC,IAKsEC,YAAa,MCmF3FC,MAtFf,WAAgB,IAAD,EAEiBf,mBAAS,GAF1B,mBAEJgB,EAFI,KAEIC,EAFJ,OAIgBjB,mBAAS,IAJzB,mBAIJkB,EAJI,KAIIC,EAJJ,OAMoBnB,mBAAS,CACpCoB,YAAY,EACZC,UAAW,KARJ,mBAMJC,EANI,KAMGC,EANH,KAWLC,EAAoB,SAACd,EAAMC,IACvBA,EAAQ,GAAKA,EAAQ,IAAOc,MAAMd,KAAqB,KAAVA,EAC/Ce,MAAM,2EAA6EP,EAAS,eAAID,EAAL,eAAcR,EAAO,MAEhHS,EAAS,eAAID,EAAL,eAAcR,GAAQC,MAIhCN,EAAkB,SAACsB,GACrBV,EAAUD,EAASW,IAkBvB,OAfAC,qBAAU,WACFV,EAAOW,UAAYX,EAAOY,SAAgC,IAArBZ,EAAOW,WAAsC,IAAnBX,EAAOY,QACtEP,EAAc,CACVH,YAAY,EACZC,UAAW,oFAGfE,EAAc,CACVH,YAAY,EACZC,UAAW,OAGpB,CAACH,IAIA,yBAAKf,UAAU,OACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,cAAf,qCACA,kBAAC,EAAD,CACIK,MAAM,0BACNI,SAAU,SAACC,GAAD,OAAQW,EAAkB,YAAaX,EAAGkB,OAAOpB,QAC3DD,KAAK,YACLP,UAAU,kBACVQ,MAAOO,EAAOW,WAAa,KAE/B,kBAAC,EAAD,CACIrB,MAAM,wBACNI,SAAU,SAACC,GAAD,OAAQW,EAAkB,UAAWX,EAAGkB,OAAOpB,QACzDD,KAAK,UACLP,UAAU,gBACVQ,MAAOO,EAAOY,SAAW,KAE7B,yBAAK3B,UAAU,UACVa,GAEJM,EAAMF,WACD,yBAAKjB,UAAU,gBAAgBmB,EAAMD,WACrCH,EAAOW,WAAaX,EAAOY,QACvB,oCACE,yBAAK3B,UAAU,oBAEP6B,IAAEC,MAAMf,EAAOW,UAAWX,EAAOY,QAAU,EAAG,GAAGI,KAAI,SAAAC,GAAE,OACnD,kBAAC,EAAD,CAAiBC,IAAKD,EAAI7B,KAAM6B,EACf9B,gBAAiB,kBAAMA,EAAgB8B,UAIpE,yBAAKhC,UAAU,oBAEP6B,IAAEC,MAAMf,EAAOW,UAAWX,EAAOY,QAAU,EAAG,GAAGI,KAAI,SAAAC,GAAE,OACnD,kBAAC,EAAD,CAAiBC,IAAKD,EAAI7B,MAAO6B,EAChB9B,gBAAiB,kBAAMA,GAAiB8B,WAInE,QC1EVE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.048a473e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nfunction IncrementButton(props) {\n\n    const [isClicked, setIsClicked] = useState(false);\n\n    const onButtonClick = () => {\n        setIsClicked(!isClicked);\n        props.incrementNumber();\n    }\n\n    return (\n        <div className=\"IncrementButton\">\n            <div>\n                <button onClick={onButtonClick}>{props.step}</button>\n            </div>\n        </div>\n    );\n}\n\nexport default IncrementButton;\n","import React from \"react\";\n\n\nfunction ValueInput(props) {\n    function handleChange(ev) {\n        props.onChange(ev)\n    }\n    return (\n        <div className={props.className}>\n            <div className=\"valueInput-title\">{props.title}</div>\n            <input type=\"text\" name={props.name} value={props.value} onChange={handleChange} placeholder={0}></input>\n        </div>\n    )\n}\n\nexport default ValueInput;","import React, {useEffect, useState} from 'react';\nimport _ from 'lodash';\nimport './App.css';\nimport IncrementButton from \"./components/IncrementButton\";\nimport ValueInput from \"./components/ValueInput\";\n\n\nfunction App() {\n\n    const [number, setNumber] = useState(0);\n\n    const [values, setValue] = useState({});\n\n    const [error, setErrorState] = useState({\n        errorState: false,\n        errorText: '',\n    });\n\n    const handleValueChange = (name, value) => {\n        if (((value < 0 || value > 20) || isNaN(value)) && value !== '') {\n            alert('Sorry non-integers or numbers outside of advised range are not allowed') && setValue({...values, [name]: ''});\n        } else {\n            setValue({...values, [name]: +value});\n        }\n    }\n\n    const incrementNumber = (n) => {\n        setNumber(number + n);\n    }\n\n    useEffect(() => {\n        if (values.fromValue > values.toValue && values.fromValue !== 0 && values.toValue !== 0) {\n            setErrorState({\n                errorState: true,\n                errorText: 'Sorry,  begin incrementing value can not be bigger than end incrementing value.',\n            });\n        } else {\n            setErrorState({\n                errorState: false,\n                errorText: '',\n            });\n        }\n    }, [values]);\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-content\">\n                <div className=\"App-header\">Please enter numbers from 1 to 20</div>\n                <ValueInput\n                    title=\"Begin incrementing at: \"\n                    onChange={(ev) => handleValueChange('fromValue', ev.target.value)}\n                    name=\"fromValue\"\n                    className=\"valueInput-from\"\n                    value={values.fromValue || ''}\n                />\n                <ValueInput\n                    title=\"End incrementing at: \"\n                    onChange={(ev) => handleValueChange('toValue', ev.target.value)}\n                    name=\"toValue\"\n                    className=\"valueInput-to\"\n                    value={values.toValue || ''}\n                />\n                <div className=\"number\">\n                    {number}\n                </div>\n                {error.errorState\n                    ? <div className=\"errorMessage\">{error.errorText}</div>\n                    : values.fromValue && values.toValue\n                        ? <>\n                            <div className=\"incrementButtons\">\n                                {\n                                    _.range(values.fromValue, values.toValue + 1, 1).map(el => (\n                                        <IncrementButton key={el} step={el}\n                                                         incrementNumber={() => incrementNumber(el)}/>\n                                    ))\n                                }\n                            </div>\n                            <div className=\"decrementButtons\">\n                                {\n                                    _.range(values.fromValue, values.toValue + 1, 1).map(el => (\n                                        <IncrementButton key={el} step={-el}\n                                                         incrementNumber={() => incrementNumber(-el)}/>\n                                    ))\n                                }\n                            </div>\n                        </> : null\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}